services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"  # App Service requires the main container to listen on port 80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  backend:
    image: "${CONTAINER_REGISTRY}/azurephotoflow-backend:${stableTag:-latest}"
    build:
      context: .
      dockerfile: backend/AzurePhotoFlow.Api/Dockerfile
      args:
        CERTIFICATE_PASSWORD: ${CERTIFICATE_PASSWORD}
        AZURE_BLOB_STORAGE: ${AZURE_BLOB_STORAGE}
        CERTIFICATE_PATH: ${CERTIFICATE_PATH}
        JWT_SECRET_KEY: ${JWT_SECRET_KEY}
        MODE: ${MODE}
        MINIO_ENDPOINT: ${MINIO_ENDPOINT}
        MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
        MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    container_name: backend
    environment:
      - ASPNETCORE_URLS=http://+:80
      - AZURE_BLOB_STORAGE=${AZURE_BLOB_STORAGE}
      - CERTIFICATE_PATH=${CERTIFICATE_PATH}
      - CERTIFICATE_PASSWORD=${CERTIFICATE_PASSWORD}
      - MODE=${MODE}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - VITE_GOOGLE_CLIENT_ID=${VITE_GOOGLE_CLIENT_ID}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - QDRANT_URL=${QDRANT_URL}
      - QDRANT_COLLECTION=${QDRANT_COLLECTION}
      - CLIP_MODEL_PATH=${CLIP_MODEL_PATH}
    networks:
      - app-network


  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    networks:
      - app-network

  frontend:
    image: "${CONTAINER_REGISTRY}/azurephotoflow-frontend:${stableTag:-latest}"
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        MODE: ${MODE:-development}
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
        VITE_GOOGLE_CLIENT_ID: ${VITE_GOOGLE_CLIENT_ID}
    container_name: frontend
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_GOOGLE_CLIENT_ID=${VITE_GOOGLE_CLIENT_ID}
      - MODE=${MODE}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
