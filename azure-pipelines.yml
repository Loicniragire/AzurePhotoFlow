trigger:
- main

pool:
  name: Default
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'AZ_PhotoFlow_connection'
  resourceGroupName: 'AzurePhotoFlow-RG'
  location: 'eastus'
  containerRegistry: 'AzurePhotoFlowACR_connection'
  storageAccountName: 'photoflowtfstatedev'
  containerName: 'tfstate'
  cognitiveAccountName: 'azurephotoflowvision'
  tfStateFile: 'azurephotoflow.tfstate' 
  backendAppServiceName: 'AzurePhotoFlowBE'
  frontendAppServiceName: 'AzurePhotoFlowFE'

resources:
  repositories:
    - repository: github_repo
      type: github
      name: Loicniragire/AzurePhotoFlow
      endpoint: 'github.com_Loicniragire' 

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: BuildDockerImages
    displayName: Build Docker Images
    pool:
      name: 'Default'
    steps:
      # Checkout GitHub repository.
      - checkout: github_repo

      # Build Backend Docker Image
      - task: Docker@2
        displayName: Build Backend Docker Image
        inputs:
          command: build
          dockerfile: backend/AzurePhotoFlow.Api/Dockerfile
          repository: azurephotoflow-backend
          tags: |
            $(Build.BuildId)

      # Build Frontend Docker Image
      - task: Docker@2
        displayName: Build Frontend Docker Image
        inputs:
          command: build
          dockerfile: frontend/Dockerfile
          arguments: --build-arg MODE=production
          repository: azurephotoflow-frontend
          tags: |
            $(Build.BuildId)

- stage: Test
  displayName: Test Stage
  dependsOn: Build
  jobs:
  - job: RunTests
    displayName: Run Unit and Integration Tests
    steps:
    - checkout: self

    # Run backend tests
    - script: |
        cd $(Build.SourcesDirectory)/tests/backend/AzurePhotoFlow.Api.Tests
        dotnet restore
        dotnet test
      displayName: Run Backend Tests

    # Run frontend tests
    - script: |
        cd $(Build.SourcesDirectory)/tests/frontend
        npm install
        npm test
      displayName: Run Frontend Tests


- stage: DeployInfrastructure
  displayName: Deploy Infrastructure
  jobs:
  - job: DeployTerraform
    displayName: Deploy Infrastructure with Terraform
    variables:
    - group: 'PhotoFlow'

    steps:
    # Set environment variables for Terraform authentication
    - script: |
        export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
        export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
        export ARM_TENANT_ID=$(ARM_TENANT_ID)
        export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)

        cd $(Build.SourcesDirectory)/Infrastructure
        terraform init \
          -backend-config="storage_account_name=$(storageAccountName)" \
          -backend-config="container_name=$(containerName)" \
          -backend-config="key=$(tfStateFile)" \
          -backend-config="resource_group_name=$(resourceGroupName)" \
          -backend-config="subscription_id=$(ARM_SUBSCRIPTION_ID)"
        terraform apply -auto-approve
      displayName: Authenticate and Apply Terraform

- stage: DeployApplications
  displayName: Deploy Applications
  variables:
  - group: 'PhotoFlow'
  dependsOn: DeployInfrastructure
  jobs:
  - job: DeployContainers
    displayName: Deploy Containers to Azure and Local Docker

    steps:

      # Login to Azure Container Registry using Service Connection
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: $(containerRegistry)

      # Pull Backend Docker Image Locally
      - script: |
          docker pull $ACR_SERVER/azurephotoflow-backend:$(Build.BuildId)
        displayName: Pull Backend Docker Image Locally
        env:
          DOCKER_HOST: $(DOCKER_HOST)
          ACR_SERVER: 'azurephotoflowacr.azurecr.io'

      # Pull Frontend Docker Image Locally
      - script: |
          docker pull AzurePhotoFlowACR.azurecr.io/azurephotoflow-frontend:$(Build.BuildId)
        displayName: Pull Frontend Docker Image Locally

      # Run Backend Container Locally
      - script: |
          docker run -d --name azurephotoflow-backend -p 8080:8080 AzurePhotoFlowACR.azurecr.io/azurephotoflow-backend:$(Build.BuildId)
        displayName: Run Backend Container Locally

      # Run Frontend Container Locally
      - script: |
          docker run -d --name azurephotoflow-frontend -p 3000:3000 AzurePhotoFlowACR.azurecr.io/azurephotoflow-frontend:$(Build.BuildId)
        displayName: Run Frontend Container Locally

      # Pull Backend Docker Image Locally
      - script: |
          docker pull AzurePhotoFlowACR.azurecr.io/azurephotoflow-backend:$(Build.BuildId)
        displayName: Pull Backend Docker Image Locally

      # Pull Frontend Docker Image Locally
      - script: |
          docker pull AzurePhotoFlowACR.azurecr.io/azurephotoflow-frontend:$(Build.BuildId)
        displayName: Pull Frontend Docker Image Locally

      # Run Backend Container Locally
      - script: |
          docker run -d --name azurephotoflow-backend -p 8080:8080 AzurePhotoFlowACR.azurecr.io/azurephotoflow-backend:$(Build.BuildId)
        displayName: Run Backend Container Locally

      # Run Frontend Container Locally
      - script: |
          docker run -d --name azurephotoflow-frontend -p 3000:3000 AzurePhotoFlowACR.azurecr.io/azurephotoflow-frontend:$(Build.BuildId)
        displayName: Run Frontend Container Locally

      # Configure Environment Variables for App Services
      - script: |
          echo "Configuring environment variables for App Services..."
          az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings AZURE_BLOB_STORAGE=$(AzureBlobStorageConnectionString)
          az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings AZURE_BLOB_STORAGE=$(AzureBlobStorageConnectionString)

          az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings VITE_API_BASE_URL=$(Backend_base_url)
          az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings VITE_API_BASE_URL=$(Backend_base_url)

          az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings CERTIFICATE_PASSWORD=$(Https_cert_password)
          az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings CERTIFICATE_PASSWORD=$(Https_cert_password)

          az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings NODE_ENV=production
          az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings NODE_ENV=production
        displayName: Set Environment Variables for App Services
        env:
          AZURE_BLOB_STORAGE: $(AzureBlobStorageConnectionString)
          VITE_APP_API_BASE_URL: $(Backend_base_url)
          CERTIFICATE_PASSWORD: $(Https_cert_password)
