trigger:
- main

pool:
  name: Default
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'AZ_PhotoFlow_connection'
  resourceGroupName: 'AzurePhotoFlow-RG'
  location: 'eastus'
  containerRegistry: 'AzurePhotoFlowACR'
  storageAccountName: 'tfstate'
  cognitiveAccountName: 'azurephotoflowvision'
  tfStateFile: 'azurephotoflow.tfstate' 
  repo: 'https://github.com/Loicniragire/AzurePhotoFlow'

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: BuildDockerImages
    displayName: Build Docker Images
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      # Checkout GitHub repository
      - task: Checkout@1
        displayName: Checkout GitHub Repository
        inputs:
          repository: $(repo)
          fetchDepth: 1

      # Build Backend Docker Image
      - task: Docker@2
        displayName: Build Backend Docker Image
        inputs:
          command: build
          dockerfile: backend/AzurePhotoFlow.Api/Dockerfile
          repository: azurephotoflow-backend
          tags: |
            $(Build.BuildId)

      # Build Frontend Docker Image
      - task: Docker@2
        displayName: Build Frontend Docker Image
        inputs:
          command: build
          dockerfile: frontend/Dockerfile
          repository: azurephotoflow-frontend
          tags: |
            $(Build.BuildId)

- stage: Test
  displayName: Test Stage
  dependsOn: Build
  jobs:
  - job: RunTests
    displayName: Run Unit and Integration Tests
    steps:
    - script: |
        cd backend
        dotnet test
        cd ../frontend
        npm test
      displayName: Run Tests

- stage: DeployInfrastructure
  displayName: Deploy Infrastructure
  jobs:
  - job: DeployTerraform
    displayName: Deploy Infrastructure with Terraform
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'

    - script: |
        export TF_VAR_storage_account_name=$(storageAccountName)
        export TF_VAR_container_name=$(containerName)
        export TF_VAR_key=$(tfStateFile)
        export TF_VAR_resource_group_name=$(resourceGroupName)
        export TF_VAR_subscription_id=$(System.AccessToken)

        terraform init
        terraform apply -auto-approve
      displayName: Initialize and Apply Terraform

- stage: DeployApplications
  displayName: Deploy Applications
  dependsOn: DeployInfrastructure
  jobs:
  - job: PushDockerImages
    displayName: Push Docker Images to ACR
    steps:
    - task: Docker@2
      displayName: Push Backend Image
      inputs:
        command: push
        containerName: azurephotoflow-backend
        tags: $(Build.BuildId)
    - task: Docker@2
      displayName: Push Frontend Image
      inputs:
        command: push
        containerName: azurephotoflow-frontend
        tags: $(Build.BuildId)
  - job: DeployToAzure
    displayName: Deploy Docker Containers to Azure
    steps:
    - task: AzureWebAppContainer@1
      displayName: Deploy Backend to Azure App Service
      inputs:
        azureSubscription: $(azureSubscription)
        appName: AzurePhotoFlow-Backend
        containerRegistry: $(containerRegistry).azurecr.io
        imageName: azurephotoflow-backend
        imageTag: $(Build.BuildId)
    - task: AzureWebAppContainer@1
      displayName: Deploy Frontend to Azure App Service
      inputs:
        azureSubscription: $(azureSubscription)
        appName: AzurePhotoFlow-Frontend
        containerRegistry: $(containerRegistry).azurecr.io
        imageName: azurephotoflow-frontend
        imageTag: $(Build.BuildId)

