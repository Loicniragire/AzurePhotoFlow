trigger:
- main

pool:
  name: Default
  vmImage: 'ubuntu-latest'

variables:
  - group: 'PhotoFlow'

  - name: azureSubscription
    value: 'AZ_PhotoFlow_connection'
  - name: subscriptionId
    value: 'ebe2acfb-f4a5-4f6b-8f30-252c571813f9'
  - name: containerRegistryConnection
    value: 'AzurePhotoFlowACR_connection'
  - name: resourceGroupName
    value: 'AzurePhotoFlow-RG'
  - name: location
    value: 'eastus'
  - name: containerRegistry
    value: 'azurephotoflowacr.azurecr.io'
  - name: storageAccountName
    value: 'photoflowtfstatedev'
  - name: containerName
    value: 'tfstate'
  - name: cognitiveAccountName
    value: 'azurephotoflowvision'
  - name: tfStateFile
    value: 'azurephotoflow.tfstate'
  - name: backendAppServiceName
    value: 'AzurePhotoFlowBE'
  - name: frontendAppServiceName
    value: 'AzurePhotoFlowFE'
  - name: stableTag
    value: "$(Build.BuildId)"

resources:
  repositories:
    - repository: github_repo
      type: github
      name: Loicniragire/AzurePhotoFlow
      endpoint: 'github.com_Loicniragire' 

stages:
# Build Stage
- stage: Build
  displayName: Build Stage
  jobs:
  - job: BuildDockerImages
    displayName: Build Docker Images
    steps:
      # Checkout source code
      - checkout: github_repo

      # Set Docker Context
      - script: |
          export DOCKER_CONFIG=$HOME/.docker
          docker context use desktop-linux
        displayName: 'Set Docker Context'

      - script: |
          echo "AZURE_BLOB_STORAGE=$(AZURE_BLOB_STORAGE)" > .env
          echo "CERTIFICATE_PASSWORD=$(CERTIFICATE_PASSWORD)" >> .env
          echo "CERTIFICATE_PATH=$(CERTIFICATE_PATH)" >> .env
          echo "MODE=$(MODE)" >> .env
          echo "VITE_API_BASE_URL=$(VITE_API_BASE_URL)"  >> .env
        displayName: Create .env file for Docker Compose

      - script: |
          echo "Printing .env file content for debugging:"
          cat .env
        displayName: Print .env file content for debugging

      # Build Docker Images
      - script: |
          docker compose --env-file .env -f docker-compose.yml build
        displayName: Build Docker Images using Compose

# Test Stage
- stage: Test
  displayName: Test Stage
  dependsOn: Build
  jobs:
  - job: RunTests
    displayName: Run Tests
    steps:
      - checkout: self

      # Start services
      - script: |
          docker compose -f docker-compose.yml up -d
        displayName: Start Containers for Testing

      # Run backend tests
      - script: |
          docker exec app dotnet test /app/tests/backend/AzurePhotoFlow.Api.Tests
        displayName: Run Backend Tests in Container

      # Run frontend tests
      - script: |
          docker exec web npm test
        displayName: Run Frontend Tests in Container

      # Stop services after testing
      - script: |
          docker compose -f docker-compose.yml down
        displayName: Tear Down Containers

# Deploy Infrastructure Stage
- stage: DeployInfrastructure
  displayName: Deploy Infrastructure
  dependsOn: Test
  jobs:
  - job: DeployTerraform
    displayName: Deploy Infrastructure with Terraform
    variables:
    - group: 'PhotoFlow'
    steps:
    # Authenticate and apply Terraform
    - script: |
        cd $(Build.SourcesDirectory)/Infrastructure
        terraform init \
          -backend-config="storage_account_name=$(storageAccountName)" \
          -backend-config="container_name=$(containerName)" \
          -backend-config="key=$(tfStateFile)" \
          -backend-config="resource_group_name=$(resourceGroupName)" \
          -backend-config="subscription_id=$(ARM_SUBSCRIPTION_ID)"
        terraform plan -out=tfplan -lock-timeout=60s
        terraform apply -auto-approve -lock-timeout=60s tfplan
      displayName: Authenticate and Apply Terraform
      env:
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

    # Assign AcrPull Role to Backend and Frontend App Services
    - script: |
        echo "Assigning AcrPull role to App Services..."
        
        # Retrieve the Principal ID for the Backend App Service
        BACKEND_PRINCIPAL_ID=$(az webapp identity show \
          --name $(backendAppServiceName) \
          --resource-group $(resourceGroupName) \
          --query principalId -o tsv)
        
        # Assign AcrPull role to Backend App Service
        az role assignment create \
          --assignee $BACKEND_PRINCIPAL_ID \
          --role "AcrPull" \
          --scope "/subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroupName)/providers/Microsoft.ContainerRegistry/registries/azurephotoflowacr"

        # Retrieve the Principal ID for the Frontend App Service
        FRONTEND_PRINCIPAL_ID=$(az webapp identity show \
          --name $(frontendAppServiceName) \
          --resource-group $(resourceGroupName) \
          --query principalId -o tsv)
        
        # Assign AcrPull role to Frontend App Service
        az role assignment create \
          --assignee $FRONTEND_PRINCIPAL_ID \
          --role "AcrPull" \
          --scope "/subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroupName)/providers/Microsoft.ContainerRegistry/registries/azurephotoflowacr"
      displayName: Assign AcrPull Role to App Services

# Deploy Applications Stage
- stage: DeployApplications
  displayName: Deploy Applications
  dependsOn: DeployInfrastructure
  variables:
    System.Debug: true
    docker_host: 'unix:///Users/loicniragire/.docker/run/docker.sock'
  jobs:
  - job: PushDockerImages
    displayName: Push Docker Images to ACR
    variables:
      - group: 'PhotoFlow'
    steps:
      # Login to Azure Container Registry
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: $(containerRegistryConnection)
      - script: |
          echo "Using Container Registry: $(containerRegistryConnection)"
        displayName: 'Verify Container Registry Variable'

      - script: |
          export DOCKER_CONFIG=$HOME/.docker
          docker context use desktop-linux
        displayName: 'Set Docker Context with Config'

      - script: |
          docker context ls
        displayName: 'Verify Docker Contexts'

      - script: |
          export DOCKER_HOST=$(docker_host)
          docker ps
        displayName: 'Test Docker Connection'

      # Push Backend Docker Image
      - script: |
          docker compose -f docker-compose.yml push
        displayName: Push docker images to ACR

  - job: DeployContainers
    displayName: Deploy Containers to Azure and Local Docker
    variables:
      - group: 'PhotoFlow'
    dependsOn: PushDockerImages
    steps:
      # Login to Azure Container Registry
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: $(containerRegistryConnection)

      - script: |
          export DOCKER_CONFIG=$HOME/.docker
          docker context use desktop-linux
        displayName: 'Set Docker Context with Config'

      - script: |
          docker context ls
        displayName: 'Verify Docker Contexts'

      - script: |
          export DOCKER_HOST=$(docker_host)
          docker ps
        displayName: 'Test Docker Connection'
      - script: |
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d
        displayName: Deploy services using compose

      # Configure Environment Variables for App Services
      - script: |
          echo "Configuring environment variables for App Services..."
          echo "Azure blob storage: $(AZURE_BLOB_STORAGE) "
          az webapp config appsettings set \
              --name $(backendAppServiceName) \
              --resource-group $(resourceGroupName) \
              --settings \
                AZURE_BLOB_STORAGE='$(AZURE_BLOB_STORAGE)' \
                CERTIFICATE_PASSWORD=$(Https_cert_password) \
                CERTIFICATE_PATH=$(CERTIFICATE_PATH) \
                NODE_ENV=production

          az webapp config appsettings set \
              --name $(frontendAppServiceName) \
              --resource-group $(resourceGroupName) \
              --settings \
                VITE_API_BASE_URL=$(VITE_API_BASE_URL) \
                NODE_ENV=production

          az webapp config container set \
              --name $(frontendAppServiceName) \
              --resource-group $(resourceGroupName) \
              --container-image-name $(containerRegistry)/azurephotoflow-frontend:$(stableTag) \
              --container-registry-url "https://$(containerRegistry)"

          az webapp log config \
              --name $(frontendAppServiceName) \
              --resource-group $(resourceGroupName) \
              --application-logging filesystem \
              --detailed-error-messages true \
              --failed-request-tracing true \
              --web-server-logging filesystem

          az webapp log config \
              --name $(backendAppServiceName) \
              --resource-group $(resourceGroupName) \
              --application-logging filesystem \
              --detailed-error-messages true \
              --failed-request-tracing true \
              --web-server-logging filesystem

          echo "Enforcing HTTPS for Azure Web App..."
          az webapp update \
              --name $(backendAppServiceName) \
              --resource-group $(resourceGroupName) \
              --set httpsOnly=true

          az webapp update \
              --name $(frontendAppServiceName) \
              --resource-group $(resourceGroupName) \
              --set httpsOnly=true

          echo "HTTPS enforced successfully."

          echo "Add a health check endpoint"
          az webapp config set \
              --resource-group AzurePhotoFlow-RG \
              --name AzurePhotoFlowFE \
              --generic-configurations '{"healthCheckPath":"/health"}'
          echo "Health check endpoint added successfully"

          echo "Configuring CORS - allow All for testing"
          az webapp cors add \
              --name AzurePhotoFlowFE \
              --resource-group AzurePhotoFlow-RG \
              --allowed-origins "*"

          az webapp cors add \
              --name AzurePhotoFlowBE \
              --resource-group AzurePhotoFlow-RG \
              --allowed-origins "https://azurephotoflowfe.azurewebsites.net,http://localhost:3000"
          echo "CORS configuration done"

          echo "Restarting backend..."
          az webapp restart \
            --name $(backendAppServiceName) \
            --resource-group $(resourceGroupName)

          echo "Restarting frontend..."
          az webapp restart \
            --name $(frontendAppServiceName) \
            --resource-group $(resourceGroupName)

        displayName: Set Environment Variables for App Services
        env:
          AZURE_BLOB_STORAGE: $(AZURE_BLOB_STORAGE)
          VITE_API_BASE_URL: $(VITE_API_BASE_URL)
          CERTIFICATE_PASSWORD: $(Https_cert_password)
          CERTIFICATE_PATH: $(CERTIFICATE_PATH)
