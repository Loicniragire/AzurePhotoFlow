trigger:
- main

pool:
  name: Default
  vmImage: 'ubuntu-latest'

variables:
  - group: 'PhotoFlow'

  - name: azureSubscription
    value: 'AZ_PhotoFlow_connection'
  - name: subscriptionId
    value: 'ebe2acfb-f4a5-4f6b-8f30-252c571813f9'
  - name: containerRegistryConnection
    value: 'AzurePhotoFlowACR_connection'
  - name: resourceGroupName
    value: 'AzurePhotoFlow-RG'
  - name: location
    value: 'eastus'
  - name: containerRegistry
    value: 'azurephotoflowacr.azurecr.io'
  - name: storageAccountName
    value: 'photoflowtfstatedev'
  - name: containerName
    value: 'tfstate'
  - name: cognitiveAccountName
    value: 'azurephotoflowvision'
  - name: tfStateFile
    value: 'azurephotoflow.tfstate'
  - name: backendAppServiceName
    value: 'AzurePhotoFlowBE'
  - name: frontendAppServiceName
    value: 'AzurePhotoFlowFE'
  - name: stableTag
    value: "$(Build.BuildId)"

resources:
  repositories:
    - repository: github_repo
      type: github
      name: Loicniragire/AzurePhotoFlow
      endpoint: 'github.com_Loicniragire' 

stages:
# Build Stage
- stage: Build
  displayName: Build Stage
  jobs:
  - job: BuildDockerImages
    displayName: Build Docker Images
    steps:
      # Checkout source code
      - checkout: github_repo

      # Set Docker Context
      - script: |
          export DOCKER_CONFIG=$HOME/.docker
          docker context use desktop-linux
        displayName: 'Set Docker Context'

      - script: |
          echo "AZURE_BLOB_STORAGE=$(AZURE_BLOB_STORAGE)" > .env
          echo "CERTIFICATE_PASSWORD=$(CERTIFICATE_PASSWORD)" >> .env
          echo "CERTIFICATE_PATH=$(CERTIFICATE_PATH)" >> .env
          echo "MODE=$(MODE)" >> .env
          echo "VITE_API_BASE_URL=$(VITE_API_BASE_URL)"  >> .env
          echo "stableTag=$(Build.BuildId)" >> .env
        displayName: Create .env file for Docker Compose

        # Publish .env file as an artifact
      - publish: $(Build.SourcesDirectory)/.env
        artifact: env-artifact
        displayName: Publish .env file artifact

      - script: |
          echo "Printing .env file content for debugging:"
          cat .env
        displayName: Print .env file content for debugging

      # Build and start Docker Images
      - script: |
          docker compose --env-file .env -f docker-compose.yml up -d --build
        displayName: Build Docker Images using Compose

       # Publish docker compose
      - publish: $(Build.SourcesDirectory)/docker-compose.yml
        artifact: compose-artifact
        displayName: Publish docker-compose.yml Artifact

# Test Stage
- stage: Test
  displayName: Test Stage
  dependsOn: Build
  jobs:
  - job: RunTests
    displayName: Run Unit and Integration Tests
    steps:
      - checkout: self
      # Run backend tests
      - script: |
          cd $(Build.SourcesDirectory)/tests/backend/AzurePhotoFlow.Api.Tests
          dotnet restore
          dotnet test
        displayName: Run Backend Tests

      # Run frontend tests
      - script: |
          cd $(Build.SourcesDirectory)/tests/frontend
          npm install
          npm test
        displayName: Run Frontend Tests

# Deploy Infrastructure Stage
- stage: DeployInfrastructure
  displayName: Deploy Infrastructure
  dependsOn: Test
  jobs:
  - job: DeployTerraform
    displayName: Deploy Infrastructure with Terraform
    variables:
    - group: 'PhotoFlow'
    steps:
    # Authenticate and apply Terraform
    - script: |
        cd $(Build.SourcesDirectory)/Infrastructure
        terraform refresh
        terraform init \
          -backend-config="storage_account_name=$(storageAccountName)" \
          -backend-config="container_name=$(containerName)" \
          -backend-config="key=$(tfStateFile)" \
          -backend-config="resource_group_name=$(resourceGroupName)" \
          -backend-config="subscription_id=$(ARM_SUBSCRIPTION_ID)"
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
      displayName: Authenticate and Apply Terraform

# Deploy Applications Stage
- stage: DeployApplications
  displayName: Deploy Applications
  dependsOn: DeployInfrastructure
  variables:
    System.Debug: true
    docker_host: 'unix:///Users/loicniragire/.docker/run/docker.sock'
  jobs:
  - job: PushDockerImages
    displayName: Push Docker Images to ACR
    variables:
      - group: 'PhotoFlow'
    steps:
      # Login to Azure Container Registry
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: $(containerRegistryConnection)
      - script: |
          echo "Using Container Registry: $(containerRegistryConnection)"
        displayName: 'Verify Container Registry Variable'

      - script: |
          export DOCKER_CONFIG=$HOME/.docker
          docker context use desktop-linux
        displayName: 'Set Docker Context with Config'

      - script: |
          docker context ls
        displayName: 'Verify Docker Contexts'

      - script: |
          export DOCKER_HOST=$(docker_host)
          docker ps
        displayName: 'Test Docker Connection'


      # Download the .env file artifact from previous stage
      - download: current
        artifact: env-artifact

      # Push Backend Docker Image
      - script: |
          ls -l $(Pipeline.Workspace)/env-artifact/.env
          cat $(Pipeline.Workspace)/env-artifact/.env  
          docker compose --env-file $(Pipeline.Workspace)/env-artifact/.env -f docker-compose.yml push
        displayName: Push docker images to ACR

  - job: DeployMultiContainers
    displayName: Deploy Multi-Container App Service
    steps:
      # Login to Azure Container Registry
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: $(containerRegistryConnection)

      # Download the docker-compose.yml artifact
      - download: current
        artifact: compose-artifact
        displayName: Download docker-compose.yml Artifact

      # Verify Docker Contexts
      - script: |
          export DOCKER_CONFIG=$HOME/.docker
          docker context use desktop-linux
          docker context ls
        displayName: 'Set and Verify Docker Contexts'

      # Pull images using the downloaded docker-compose.yml
      - script: |
          docker compose -f $(Pipeline.Workspace)/compose-artifact/docker-compose.yml pull
        displayName: Pull Docker Images

      # Start containers using the downloaded docker-compose.yml
      - script: |
          docker compose -f $(Pipeline.Workspace)/compose-artifact/docker-compose.yml up -d
        displayName: Deploy Services Using Docker Compose

      # Deploy the multi-container configuration to Azure App Service
      - script: |
          az webapp config container set \
              --name $(webAppServiceName) \
              --resource-group $(resourceGroupName) \
              --multi-container-config-type "compose" \
              --multi-container-config-file $(Pipeline.Workspace)/compose-artifact/docker-compose.yml
        displayName: Deploy Multi-Container Configuration to Azure App Service

      # Configure App Service environment variables
      - script: |
          az webapp config appsettings set \
              --name $(webAppServiceName) \
              --resource-group $(resourceGroupName) \
              --settings \
                AZURE_BLOB_STORAGE=$(AZURE_BLOB_STORAGE) \
                VITE_API_BASE_URL=$(VITE_API_BASE_URL) \
                CERTIFICATE_PASSWORD=$(CERTIFICATE_PASSWORD) \
                CERTIFICATE_PATH=$(CERTIFICATE_PATH) \
                NODE_ENV=production
        displayName: Configure App Service Environment Variables

       # Add a Health check endpoint
      - script: |
          curl -I https://$(webAppServiceName).azurewebsites.net/health
          if [ $? -ne 0 ]; then
            echo "Health check failed!"
            exit 1
          fi
        displayName: Perform Health Check
