trigger:
- main

pool:
  name: Default
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'AZ_PhotoFlow_connection'
  resourceGroupName: 'AzurePhotoFlow-RG'
  location: 'eastus'
  containerRegistry: 'azurephotoflowacr.azurecr.io'  # Use lowercase
  storageAccountName: 'photoflowtfstatedev'
  containerName: 'tfstate'
  cognitiveAccountName: 'azurephotoflowvision'
  tfStateFile: 'azurephotoflow.tfstate'
  backendAppServiceName: 'AzurePhotoFlowBE'
  frontendAppServiceName: 'AzurePhotoFlowFE'

resources:
  repositories:
    - repository: github_repo
      type: github
      name: Loicniragire/AzurePhotoFlow
      endpoint: 'github.com_Loicniragire' 

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: BuildDockerImages
    displayName: Build Docker Images
    steps:
      # Checkout GitHub repository
      - checkout: github_repo

      # Build Backend Docker Image
      - task: Docker@2
        displayName: Build Backend Docker Image
        inputs:
          command: build
          dockerfile: backend/AzurePhotoFlow.Api/Dockerfile
          repository: azurephotoflow-backend
          tags: |
            $(Build.BuildId)

      # Build Frontend Docker Image
      - task: Docker@2
        displayName: Build Frontend Docker Image
        inputs:
          command: build
          dockerfile: frontend/Dockerfile
          arguments: --build-arg MODE=production
          repository: azurephotoflow-frontend
          tags: |
            $(Build.BuildId)

- stage: DeployApplications
  displayName: Deploy Applications
  dependsOn: Build
  jobs:
  - job: PushDockerImages
    displayName: Push Docker Images to ACR
    steps:
      # Login to Azure Container Registry
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: AzurePhotoFlowACR_connection

      # Push Backend Docker Image
      - script: |
          docker push $(containerRegistry)/azurephotoflow-backend:$(Build.BuildId)
        displayName: Push Backend Docker Image

      # Push Frontend Docker Image
      - script: |
          docker push $(containerRegistry)/azurephotoflow-frontend:$(Build.BuildId)
        displayName: Push Frontend Docker Image

  - job: DeployContainers
    displayName: Deploy Containers to Azure and Local Docker
    dependsOn: PushDockerImages
    steps:
      # Pull Backend Docker Image Locally
      - script: |
          docker pull $(containerRegistry)/azurephotoflow-backend:$(Build.BuildId)
        displayName: Pull Backend Docker Image Locally

      # Pull Frontend Docker Image Locally
      - script: |
          docker pull $(containerRegistry)/azurephotoflow-frontend:$(Build.BuildId)
        displayName: Pull Frontend Docker Image Locally

      # Run Backend Container Locally
      - script: |
          docker run -d --name azurephotoflow-backend -p 8080:8080 $(containerRegistry)/azurephotoflow-backend:$(Build.BuildId)
        displayName: Run Backend Container Locally

      # Run Frontend Container Locally
      - script: |
          docker run -d --name azurephotoflow-frontend -p 3000:3000 $(containerRegistry)/azurephotoflow-frontend:$(Build.BuildId)
        displayName: Run Frontend Container Locally

      # Configure Environment Variables for App Services
      - script: |
          echo "Configuring environment variables for App Services..."
          az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings AZURE_BLOB_STORAGE=$(AzureBlobStorageConnectionString)
          az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings AZURE_BLOB_STORAGE=$(AzureBlobStorageConnectionString)

          az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings VITE_API_BASE_URL=$(Backend_base_url)
          az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings VITE_API_BASE_URL=$(Backend_base_url)

          az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings CERTIFICATE_PASSWORD=$(Https_cert_password)
          az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings CERTIFICATE_PASSWORD=$(Https_cert_password)

          az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings NODE_ENV=production
          az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings NODE_ENV=production
        displayName: Set Environment Variables for App Services
        env:
          AZURE_BLOB_STORAGE: $(AzureBlobStorageConnectionString)
          VITE_APP_API_BASE_URL: $(Backend_base_url)
          CERTIFICATE_PASSWORD: $(Https_cert_password)

