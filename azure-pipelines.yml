trigger:
- main

pool:
  name: Default
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'AZ_PhotoFlow_connection'
  resourceGroupName: 'AzurePhotoFlow-RG'
  location: 'eastus'
  containerRegistry: 'AzurePhotoFlowACR'
  storageAccountName: 'photoflowtfstatedev'
  containerName: 'tfstate'
  cognitiveAccountName: 'azurephotoflowvision'
  tfStateFile: 'azurephotoflow.tfstate' 
  backendAppServiceName: 'AzurePhotoFlowBE'
  frontendAppServiceName: 'AzurePhotoFlowFE'
  resourceGroup: 'PhotoFlow' 

resources:
  repositories:
    - repository: github_repo
      type: github
      name: Loicniragire/AzurePhotoFlow
      endpoint: 'github.com_Loicniragire' 

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: BuildDockerImages
    displayName: Build Docker Images
    pool:
      name: 'Default'
    steps:
      # Checkout GitHub repository.
      - checkout: github_repo

      # Build Backend Docker Image
      - task: Docker@2
        displayName: Build Backend Docker Image
        inputs:
          command: build
          dockerfile: backend/AzurePhotoFlow.Api/Dockerfile
          repository: azurephotoflow-backend
          tags: |
            $(Build.BuildId)

      # Build Frontend Docker Image
      - task: Docker@2
        displayName: Build Frontend Docker Image
        inputs:
          command: build
          dockerfile: frontend/Dockerfile
          repository: azurephotoflow-frontend
          tags: |
            $(Build.BuildId)

- stage: Test
  displayName: Test Stage
  dependsOn: Build
  jobs:
  - job: RunTests
    displayName: Run Unit and Integration Tests
    steps:
    - checkout: self

    # Run backend tests
    - script: |
        cd $(Build.SourcesDirectory)/tests/backend/AzurePhotoFlow.Api.Tests
        dotnet restore
        dotnet test
      displayName: Run Backend Tests

    # Run frontend tests
    - script: |
        cd $(Build.SourcesDirectory)/tests/frontend
        npm install
        npm test
      displayName: Run Frontend Tests


- stage: DeployInfrastructure
  displayName: Deploy Infrastructure
  jobs:
  - job: DeployTerraform
    displayName: Deploy Infrastructure with Terraform
    variables:
    - group: $(resourceGroup)

    steps:
    # Set environment variables for Terraform authentication
    - script: |
        export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
        export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
        export ARM_TENANT_ID=$(ARM_TENANT_ID)
        export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)

        cd $(Build.SourcesDirectory)/Infrastructure
        terraform init \
          -backend-config="storage_account_name=$(storageAccountName)" \
          -backend-config="container_name=$(containerName)" \
          -backend-config="key=$(tfStateFile)" \
          -backend-config="resource_group_name=$(resourceGroupName)" \
          -backend-config="subscription_id=$(ARM_SUBSCRIPTION_ID)"
        terraform apply -auto-approve
      displayName: Authenticate and Apply Terraform

- stage: DeployApplications
  displayName: Deploy Applications
  dependsOn: DeployInfrastructure
  jobs:
  - job: PushDockerImages
    displayName: Push Docker Images to ACR
    steps:
    - task: Docker@2
      displayName: Push Backend Image
      inputs:
        command: push
        containerName: azurephotoflow-backend
        tags: $(Build.BuildId)
    - task: Docker@2
      displayName: Push Frontend Image
      inputs:
        command: push
        containerName: azurephotoflow-frontend
        tags: $(Build.BuildId)

  - job: DeployToAzure
    displayName: Deploy Docker Containers to Azure
    variables:
    - group: $(resourceGroup)

    steps:
    - task: AzureWebAppContainer@1
      displayName: Deploy Backend to Azure App Service
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(backendAppServiceName)
        containerRegistry: $(containerRegistry).azurecr.io
        imageName: azurephotoflow-backend
        imageTag: $(Build.BuildId)
    - task: AzureWebAppContainer@1
      displayName: Deploy Frontend to Azure App Service
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(frontendAppServiceName)
        containerRegistry: $(containerRegistry).azurecr.io
        imageName: azurephotoflow-frontend
        imageTag: $(Build.BuildId)
    - script: |
        echo "Configuring environment variables for App Services..."
        az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroup) --settings AZURE_BLOB_STORAGE=$(AzureBlobStorageConnectionString)
        az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroup) --settings AZURE_BLOB_STORAGE=$(AzureBlobStorageConnectionString)

        az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings VITE_API_BASE_URL=$(Backend_base_url)
        az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings VITE_API_BASE_URL=$(Backend_base_url)

        az webapp config appsettings set --name $(backendAppServiceName) --resource-group $(resourceGroupName) --settings CERTIFICATE_PASSWORD=$(Https_cert_password)
        az webapp config appsettings set --name $(frontendAppServiceName) --resource-group $(resourceGroupName) --settings CERTIFICATE_PASSWORD=$(Https_cert_password)

      displayName: Set Environment Variables for App Services
      env:
        AZURE_BLOB_STORAGE: $(AzureBlobStorageConnectionString)
        VITE_APP_API_BASE_URL: $(Backend_base_url)
        CERTIFICATE_PASSWORD: $(Https_cert_password)

