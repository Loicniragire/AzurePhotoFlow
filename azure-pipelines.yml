trigger:
- main

pool:
  name: Default
  vmImage: 'ubuntu-latest'

variables:
  - group: 'PhotoFlow'
  - name: azureSubscription
    value: 'AZ_PhotoFlow_connection'
  - name: subscriptionId
    value: 'ebe2acfb-f4a5-4f6b-8f30-252c571813f9'
  - name: containerRegistryConnection
    value: 'AzurePhotoFlowACR_connection'
  - name: resourceGroupName
    value: 'AzurePhotoFlow-RG'
  - name: location
    value: 'eastus'
  - name: containerRegistry
    value: 'azurephotoflowacr.azurecr.io'
  - name: storageAccountName
    value: 'photoflowtfstatedev'
  - name: containerName
    value: 'tfstate'
  - name: logging
    value: 'logs'
  - name: cognitiveAccountName
    value: 'azurephotoflowvision'
  - name: tfStateFile
    value: 'azurephotoflow.tfstate'
  - name: stableTag
    value: "$(Build.BuildId)"

  # Web App names as defined in Terraform variables
  - name: backendWebAppName
    value: "photoflowbackendwebapp"
  - name: frontendWebAppName
    value: "loicportraits"

resources:
  repositories:
    - repository: github_repo
      type: github
      name: Loicniragire/AzurePhotoFlow
      endpoint: 'github.com_Loicniragire'

stages:
# ---------------------------------------------------------------------------
# Build Stage
# ---------------------------------------------------------------------------
- stage: Build
  displayName: Build Stage
  jobs:
  - job: BuildDockerImages
    displayName: Build Docker Images
    steps:
      - checkout: github_repo

      - script: |
          export DOCKER_CONFIG=$HOME/.docker
          docker context use desktop-linux
        displayName: 'Set Docker Context'

      # Create .env file for local Docker usage
      - script: |
          echo "AZURE_BLOB_STORAGE=$(AZURE_BLOB_STORAGE)" > .env
          echo "CERTIFICATE_PASSWORD=$(CERTIFICATE_PASSWORD)" >> .env
          echo "CERTIFICATE_PATH=$(CERTIFICATE_PATH)" >> .env
          echo "MODE=$(MODE)" >> .env
          echo "VITE_API_BASE_URL=$(VITE_API_BASE_URL)" >> .env
          echo "stableTag=$(Build.BuildId)" >> .env
          echo "CONTAINER_REGISTRY=$(containerRegistry)" >> .env
        displayName: 'Create .env file'

      - publish: $(Build.SourcesDirectory)/.env
        artifact: env-artifact
        displayName: 'Publish .env File Artifact'

      - script: |
          echo "Printing .env file content for debugging:"
          cat .env
        displayName: 'Print .env File Content'

      # Build and Tag Docker Images (Backend, Frontend) using Buildx (BuildKit enabled)
      - script: |
          set -e

          echo "Switching to Buildx builder 'desktop-linux'..."
          docker buildx use desktop-linux

          echo "Building backend image using Buildx with --load..."
          docker buildx build --load \
            --build-arg CERTIFICATE_PASSWORD=$(CERTIFICATE_PASSWORD) \
            --build-arg AZURE_BLOB_STORAGE=$(AZURE_BLOB_STORAGE) \
            --build-arg CERTIFICATE_PATH=$(CERTIFICATE_PATH) \
            --build-arg JWT_SECRET_KEY=$(JWT_SECRET_KEY) \
            --build-arg MODE=$(MODE) \
            -f ./backend/AzurePhotoFlow.Api/Dockerfile \
            -t $(containerRegistry)/azurephotoflow-backend:$(Build.BuildId) \
            ./backend/AzurePhotoFlow.Api

          echo "Building frontend image using Buildx with --load..."
          docker buildx build --load \
            --build-arg MODE=$(MODE) \
            --build-arg VITE_API_BASE_URL=$(VITE_API_BASE_URL) \
            --build-arg VITE_GOOGLE_CLIENT_ID=$(VITE_GOOGLE_CLIENT_ID) \
            -f ./frontend/Dockerfile \
            -t $(containerRegistry)/azurephotoflow-frontend:$(Build.BuildId) \
            ./frontend

          echo "Tagging images for latest..."
          docker tag $(containerRegistry)/azurephotoflow-backend:$(Build.BuildId) $(containerRegistry)/azurephotoflow-backend:latest
          docker tag $(containerRegistry)/azurephotoflow-frontend:$(Build.BuildId) $(containerRegistry)/azurephotoflow-frontend:latest
        displayName: 'Build and Tag Images'

# ---------------------------------------------------------------------------
# Test Stage
# ---------------------------------------------------------------------------
- stage: Test
  displayName: Test Stage
  dependsOn: Build
  jobs:
  - job: RunTests
    displayName: Run Unit and Integration Tests
    steps:
      - checkout: self
      - script: |
          cd $(Build.SourcesDirectory)/tests/backend/AzurePhotoFlow.Api.Tests
          dotnet restore
          dotnet test
        displayName: 'Run Backend Tests'
      - script: |
          cd $(Build.SourcesDirectory)/tests/frontend
          npm install
          npm test
        displayName: 'Run Frontend Tests'

# ---------------------------------------------------------------------------
# Deploy Infrastructure Stage
# ---------------------------------------------------------------------------
- stage: DeployInfrastructure
  displayName: Deploy Infrastructure
  dependsOn: Test
  jobs:
  - job: DeployTerraform
    displayName: Deploy Infrastructure with Terraform
    steps:
      - script: |
          cd $(Build.SourcesDirectory)/Infrastructure
          terraform init \
            -backend-config="storage_account_name=$(storageAccountName)" \
            -backend-config="container_name=$(containerName)" \
            -backend-config="key=$(tfStateFile)" \
            -backend-config="resource_group_name=$(resourceGroupName)" \
            -backend-config="subscription_id=$(ARM_SUBSCRIPTION_ID)"
          terraform plan \
            -var="backend_image_tag=$(Build.BuildId)" \
            -var="frontend_image_tag=$(Build.BuildId)" \
            -var="azure_blob_storage=$(AZURE_BLOB_STORAGE)" \
            -var="certificate_password=$(CERTIFICATE_PASSWORD)" \
            -var="certificate_path=$(CERTIFICATE_PATH)" \
            -var="vite_api_base_url=$(VITE_API_BASE_URL)" \
            -var="backend_web_app_name=$(backendWebAppName)" \
            -var="frontend_web_app_name=$(frontendWebAppName)" \
            -var="ssl_certificate_password=$(CERTIFICATE_PASSWORD)" \
            -var="docker_registry_username=$(ACR_USERNAME)" \
            -var="docker_registry_password=$(ACR_PASSWORD)" \
            -var="vite_google_client_id=$(VITE_GOOGLE_CLIENT_ID)" \
            -var="jwt_secret_key=$(JWT_SECRET_KEY)" \
            -out=tfplan
          terraform apply \
            -auto-approve \
            -parallelism=5 \
            -lock-timeout=60s tfplan || exit 1
        displayName: 'Authenticate and Apply Terraform'

# ---------------------------------------------------------------------------
# Deploy Applications Stage
# ---------------------------------------------------------------------------
- stage: DeployApplications
  displayName: Deploy Applications
  dependsOn: DeployInfrastructure
  variables:
    System.Debug: true
  jobs:
    # Push Docker Images to ACR
    - job: PushDockerImages
      displayName: Push Docker Images to ACR
      steps:
        - task: Docker@2
          displayName: 'Login to ACR'
          inputs:
            command: login
            containerRegistry: $(containerRegistryConnection)

        - script: |
            echo "Using Container Registry: $(containerRegistry)"
            echo "Verifying Docker contexts..."
            export DOCKER_CONFIG=$HOME/.docker
            docker context use desktop-linux
            docker context ls
          displayName: 'Verify Docker Context'

        - script: |
            echo "Listing Docker images available locally..."
            docker images
          displayName: 'List Docker Images'

        - download: current
          artifact: env-artifact

        # Push images individually
        - script: |
            echo "Pushing backend and frontend images to ACR..."
            docker push $(containerRegistry)/azurephotoflow-backend:$(Build.BuildId)
            docker push $(containerRegistry)/azurephotoflow-backend:latest
            docker push $(containerRegistry)/azurephotoflow-frontend:$(Build.BuildId)
            docker push $(containerRegistry)/azurephotoflow-frontend:latest
          displayName: 'Push Docker Images to ACR'

# ---------------------------------------------------------------------------
# Validate Stage
# ---------------------------------------------------------------------------
- stage: Validate
  displayName: Validation Stage
  dependsOn: DeployApplications
  jobs:
    - job: WaitForHealthAndSmokeTest
      displayName: Wait for Health & Smoke Test
      steps:
        # Optional: Wait for backend /health endpoint
        - script: |
            echo "Waiting for backend container /health to become healthy..."
            BACKEND_URL="https://$(backendWebAppName).azurewebsites.net/health"
            MAX_ATTEMPTS=6
            SLEEP_BETWEEN=10
            ATTEMPT=1
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]
            do
              echo "Attempt $ATTEMPT: Checking ${BACKEND_URL}"
              if curl -s -f ${BACKEND_URL}; then
                echo "Backend is healthy!"
                break
              fi
              echo "Health check unavailable. Waiting $SLEEP_BETWEEN seconds..."
              ATTEMPT=$((ATTEMPT+1))
              sleep $SLEEP_BETWEEN
            done
            if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
              echo "Health check failed after $MAX_ATTEMPTS attempts!"
              exit 1
            fi
          displayName: 'Wait for Backend Health Endpoint'

        - script: |
            echo "waiting for frontend container /health to become healthy..."
            FRONTEND_URL="https://$(frontendWebAppName).azurewebsites.net/health"
            MAX_ATTEMPTS=6
            SLEEP_BETWEEN=10
            ATTEMPT=1
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]
            do
              echo "Attempt $ATTEMPT: Checking ${FRONTEND_URL}"
              if curl -s -f ${FRONTEND_URL}; then
                echo "Frontend is healthy!"
                break
              fi
              echo "Health check unavailable. Waiting $SLEEP_BETWEEN seconds..."
              ATTEMPT=$((ATTEMPT+1))
              sleep $SLEEP_BETWEEN
            done
            if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
              echo "Health check failed after $MAX_ATTEMPTS attempts!"
              exit 1
            fi
          displayName: 'Wait for Frontend Health Endpoint'

        # Quick Smoke Test
        - script: |
            FRONTEND_URL="https://$(frontendWebAppName).azurewebsites.net"
            BACKEND_HEALTH_URL="https://$(backendWebAppName).azurewebsites.net/health"

            echo "Checking Frontend at ${FRONTEND_URL}"
            curl -sSf "${FRONTEND_URL}" | grep "Loic Portraits" || exit 1

            echo "Checking Backend at ${BACKEND_HEALTH_URL}"
            curl -sSf "${BACKEND_HEALTH_URL}" | grep "Healthy" || exit 1
          displayName: 'Smoke Tests'
